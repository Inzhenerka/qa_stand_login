name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: eu-west-1
  AWS_IAM_ROLE: 'arn:aws:iam::975050069036:role/ecs-deployment-role'
  ECR_REPOSITORY: qa-stand-login
  ECS_SERVICE: qa-stand-login
  ECS_CLUSTER: pumproom

jobs:
  build_and_push:
    name: üî® Build and Push Image
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: ‚¨áÔ∏è Checkout
        uses: actions/checkout@v4

      - name: üóùÔ∏è Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_IAM_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üö™ Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: üèóÔ∏è Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest
        run: |
          docker compose build
          docker compose push
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy:
    name: üîÅ Restart ECS Service
    needs: build_and_push
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: ‚¨áÔ∏è Checkout
        uses: actions/checkout@v4

      - name: üóùÔ∏è Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_IAM_ROLE }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üöÄ Force ECS deployment
        run: |
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment
          aws ecs wait services-stable --cluster $ECS_CLUSTER --services $ECS_SERVICE

      - name: ‚úîÔ∏è Verify deployment status
        run: |
          rollout=$(aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --query 'services[0].deployments[?status==`PRIMARY`].rolloutState' \
            --output text)
          echo "Deployment status: $rollout"
          [ "$rollout" = "COMPLETED" ] || exit 1
